import React, { useState, useEffect } from "react";
import "./LevelDisplay.css";

const LevelDisplay = ({ initialXp = 0, subjectName }) => {
    const [xp, setXp] = useState(initialXp);
    const [isDead, setIsDead] = useState(false);

    useEffect(() => {
        const interval = setInterval(() => {
            setXp((prevXp) => {
                if (prevXp > 0) {
                    return prevXp - 1; // 24ÊôÇÈñì„Åî„Å®„Å´XP„Çí1Ê∏õÂ∞ë
                } else {
                    setIsDead(true); // XP„Åå0Êú™Ê∫Ä„Å´„Å™„Å£„Åü„ÇâÊ≠ª‰∫°
                    return 0;
                }
            });
        }, 24 * 60 * 60 * 1000); // 24ÊôÇÈñì„Åî„Å®„Å´ÂÆüË°å

        return () => clearInterval(interval);
    }, []);

    useEffect(() => {
        setXp(initialXp);
    }, [initialXp]);

    const level = Math.max(0, Math.floor(xp / 100) + 1); // XP„ÅåÊú™ÂÆöÁæ©„ÅÆÊôÇ„ÇÇ0„Å®„Åó„Å¶Êâ±„ÅÜ
    const nextLevelXp = isDead ? 0 : level * 100;// Ê¨°„ÅÆ„É¨„Éô„É´„Å´ÂøÖË¶Å„Å™XP
    const progressPercentage = xp ? ((xp % 100) / 100) * 100 : 0; // NaNÂõûÈÅø

    // „Åü„Åæ„Åî„Å£„Å°„ÅÆË°®ÊÉÖ„ÇíÂ§âÊõ¥
    const getTamagotchiImage = () => {
        if (isDead) return "‚ò†Ô∏è"; // Ê≠ª‰∫°Áä∂ÊÖã
        if (level < 5) return "üê£";  // „É¨„Éô„É´‰Ωé
        if (level < 10) return "üòä"; // „É¨„Éô„É´‰∏≠
        return "üòé";               // „É¨„Éô„É´È´ò
    };

    console.log(`Rendering LevelDisplay for ${subjectName} with XP: ${xp}, Level: ${level}, Image: ${getTamagotchiImage()}`);

    return (
        <div className="level-display-card bg-base-200 shadow-lg p-4 rounded-lg flex flex-col items-center">
            <h3 className="text-xl font-bold">{subjectName}</h3>
            <div className="text-6xl">{getTamagotchiImage()}</div>
            <div className="level-display-progress w-full bg-gray-300 rounded-full h-4 mt-2">
                <div
                    className="bg-blue-500 h-4 rounded-full transition-all duration-300"
                    style={{ width: `${progressPercentage}%` }}
                ></div>
            </div>
            <p className="text-sm text-gray-400">XP: {xp} / {nextLevelXp}</p>
        </div>
    );    
};

export default LevelDisplay;